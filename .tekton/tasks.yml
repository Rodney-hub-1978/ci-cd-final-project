---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: cleanup
spec:
  workspaces:
    - name: source
  steps:
    - name: remove
      image: alpine:3
      workingDir: $(workspaces.source.path)
      script: |
        #!/usr/bin/env sh
        set -eu
        echo "Cleaning workspace..."
        rm -rf $(workspaces.source.path)/*

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: git-clone
spec:
  workspaces:
    - name: source
  params:
    - name: repo-url
      description: URL of the git repository
      type: string
  steps:
    - name: clone
      image: alpine/git
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/sh
        git clone $(params.repo-url) .

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: flake8
spec:
  workspaces:
    - name: source
  steps:
    - name: lint
      image: python:3.9-slim
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/bash
        set -e
        python -m pip install --upgrade pip
        pip install flake8
        flake8 .

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: nose
spec:
  workspaces:
    - name: source
  params:
    - name: args
      description: Arguments to pass to nose
      type: string
      default: "-v"
  steps:
    - name: nosetests
      image: python:3.9-slim
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/bash
        set -e
        python -m pip install --upgrade pip wheel
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        nosetests $(params.args)

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: buildah
spec:
  workspaces:
    - name: source
  params:
    - name: image
      description: Name of the image to build
      type: string
  steps:
    - name: build
      image: quay.io/buildah/stable:v1.30.0
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/bash
        set -e
        buildah bud -t $(params.image) .

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: oc-deploy
spec:
  params:
    - name: app-name
      description: Name of the app to deploy
      type: string
    - name: build-image
      description: Image to deploy
      type: string
  steps:
    - name: deploy
      image: registry.redhat.io/openshift4/ose-cli:latest
      script: |
        #!/bin/bash
        set -e
        oc create deployment $(params.app-name) --image=$(params.build-image) --dry-run=client -o yaml | oc apply -f -

